/** * Created by wangxiaoyu on 2017/8/18. */import { EventEmitter } from 'events';import AppDispatcher from '../AppDispatcher';import * as ActionTypes from '../ActionType';const CHANGE_EVENT = 'changed';const counterValues = {    "First": 0,    "Second":10,    "Third":30};//EventEmitter.prototype 支持下列相关函数// emit 广播事件，emit('事件名称')//on 绑定事件 on('事件名称'，回调函数)//removeListener 删除事件const CounterStore = Object.assign({},EventEmitter.prototype, {    getCounterValues : function () {        return counterValues    },    emitChange: function () {        this.emit(CHANGE_EVENT);    },    addChangeListener:function (callback) {        this.on(CHANGE_EVENT,callback);    },    removeChangeListener:function (callback) {        this.removeListener(CHANGE_EVENT,callback);    }});//必须要在创建store后注册事件到全局的Dispather实例上才有用CounterStore.dispatchToken = AppDispatcher.register((action) => {   if(action.type === ActionTypes.INCREMENT){       counterValues[action.counterCaption] ++ ;       console.log('counterValues',counterValues);       CounterStore.emitChange();   }else if(action.type === ActionTypes.DECREMENT){       counterValues[action.counterCaption] --;       CounterStore.emitChange();   }});export default CounterStore;