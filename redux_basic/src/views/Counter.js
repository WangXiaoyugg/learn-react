/** * Created by wangxiaoyu on 2017/8/18. */import React , { Component,PropTypes } from  'react';import * as Actions from '../Actions';const buttonStyle = {    margin: '10px'};class Counter extends Component {    render(){        const { caption,onClickIncrementButton,onClickDecrementButton,value} = this.props;        return(            <div>                <button style={buttonStyle} onClick={onClickIncrementButton}>+</button>                <button style={buttonStyle} onClick={onClickDecrementButton}>-</button>                <span>{caption} count: {value}</span>            </div>        )    }}class CounterContainer extends Component {    constructor(props,context){        super(props,context);        console.log('context',this.context);        this.onChange = this.onChange.bind(this);        this.onClickIncrementButton = this.onClickIncrementButton.bind(this);        this.onClickDecrementButton = this.onClickDecrementButton.bind(this);        this.getOwnState = this.getOwnState.bind(this);        this.state = this.getOwnState();    }    getOwnState(){        return {            value:this.context.store.getState()[this.props.caption]        }    }    onClickIncrementButton(){        this.context.store.dispatch(Actions.increment(this.props.caption));    }    onClickDecrementButton(){        this.context.store.dispatch(Actions.decrement(this.props.caption));    }    onChange(){        this.setState(this.getOwnState());    }    shouldComponentUpdate(nextProps,nextState){        return (nextProps.caption !== this.props.caption) ||                (nextState.value !== this.state.value)    }    componentDidMount(){        this.context.store.subscribe(this.onChange)    }    componentWillUnmount(){        this.context.store.unsubscribe(this.onChange)    }    render(){        const value = this.state.value;        const {caption} = this.props;        return(          <Counter caption={this.props.caption}                   onClickIncrementButton={this.onClickIncrementButton}                   onClickDecrementButton={this.onClickDecrementButton}                   value={this.state.value}/>        )    }}CounterContainer.propTypes = {    caption:PropTypes.string.isRequired};CounterContainer.contextTypes = {    store:PropTypes.object};export default CounterContainer;